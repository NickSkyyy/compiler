+---------------------------+
- Source file: tests/test.c -
+---------------------------+

lno@0    @0    program        children: [ @1 @7 @13 @19 @25 @31 @36 @41 @46 @51 @56 @61 @64 @69 @72 @75 @88 ]
lno@6    @1    statement      children: [ @2 @3 @4 ]
               stmt: declaration
lno@6    @2    key            key: const
lno@6    @3    type           type: boolean
lno@6    @4    statement      children: [ @5 @6 ]
               stmt: assign
lno@6    @5    variable       varname: FT
lno@6    @6    const          value: 1
lno@7    @7    statement      children: [ @8 @9 @10 ]
               stmt: declaration
lno@7    @8    key            key: const
lno@7    @9    type           type: boolean
lno@7    @10   statement      children: [ @11 @12 ]
               stmt: assign
lno@7    @11   variable       varname: FF
lno@7    @12   const          value: 0
lno@8    @13   statement      children: [ @14 @15 @16 ]
               stmt: declaration
lno@8    @14   key            key: const
lno@8    @15   type           type: character
lno@8    @16   statement      children: [ @17 @18 ]
               stmt: assign
lno@8    @17   variable       varname: CHAR
lno@8    @18   const          value:  
lno@9    @19   statement      children: [ @20 @21 @22 ]
               stmt: declaration
lno@9    @20   key            key: const
lno@9    @21   type           type: integer
lno@9    @22   statement      children: [ @23 @24 ]
               stmt: assign
lno@9    @23   variable       varname: INT
lno@9    @24   const          value: 100
lno@10   @25   statement      children: [ @26 @27 @28 ]
               stmt: declaration
lno@10   @26   key            key: const
lno@10   @27   type           type: string
lno@10   @28   statement      children: [ @29 @30 ]
               stmt: assign
lno@10   @29   variable       varname: STR
lno@10   @30   const          value: qixiaorui
lno@12   @31   statement      children: [ @32 @33 ]
               stmt: declaration
lno@12   @32   type           type: boolean
lno@12   @33   statement      children: [ @34 @35 ]
               stmt: assign
lno@12   @34   variable       varname: ft
lno@12   @35   const          value: 1
lno@13   @36   statement      children: [ @37 @38 ]
               stmt: declaration
lno@13   @37   type           type: boolean
lno@13   @38   statement      children: [ @39 @40 ]
               stmt: assign
lno@13   @39   variable       varname: ff
lno@13   @40   const          value: 0
lno@14   @41   statement      children: [ @42 @43 ]
               stmt: declaration
lno@14   @42   type           type: character
lno@14   @43   statement      children: [ @44 @45 ]
               stmt: assign
lno@14   @44   variable       varname: ch
lno@14   @45   const          value: a
lno@15   @46   statement      children: [ @47 @48 ]
               stmt: declaration
lno@15   @47   type           type: integer
lno@15   @48   statement      children: [ @49 @50 ]
               stmt: assign
lno@15   @49   variable       varname: dec
lno@15   @50   const          value: 0
lno@16   @51   statement      children: [ @52 @53 ]
               stmt: declaration
lno@16   @52   type           type: integer
lno@16   @53   statement      children: [ @54 @55 ]
               stmt: assign
lno@16   @54   variable       varname: oct
lno@16   @55   const          value: 8
lno@17   @56   statement      children: [ @57 @58 ]
               stmt: declaration
lno@17   @57   type           type: integer
lno@17   @58   statement      children: [ @59 @60 ]
               stmt: assign
lno@17   @59   variable       varname: hex
lno@17   @60   const          value: 16
lno@18   @61   statement      children: [ @62 @63 ]
               stmt: declaration
lno@18   @62   type           type: integer
lno@18   @63   variable       varname: noval
lno@19   @64   statement      children: [ @65 @66 ]
               stmt: declaration
lno@19   @65   type           type: string
lno@19   @66   statement      children: [ @67 @68 ]
               stmt: assign
lno@19   @67   variable       varname: s
lno@19   @68   const          value: qxr

lno@21   @69   program        children: [ @70 @71 ]
lno@21   @70   type           type: void
lno@21   @71   variable       varname: check_void_nothing

lno@26   @72   program        children: [ @73 @74 ]
lno@26   @73   type           type: void
lno@26   @74   variable       varname: check_void_semi

lno@31   @75   program        children: [ @76 @77 @78 @85 ]
lno@31   @76   type           type: integer
lno@31   @77   variable       varname: check_int_param
lno@31   @78   statement      children: [ @79 @82 ]
               stmt: params
lno@31   @79   param          children: [ @80 @81 ]
lno@31   @80   type           type: integer
lno@31   @81   variable       varname: d
lno@31   @82   param          children: [ @83 @84 ]
lno@31   @83   type           type: integer
lno@31   @84   variable       varname: e
lno@33   @85   statement      children: [ @86 ]
               stmt: block
lno@33   @86   statement      children: [ @87 @81 ]
               stmt: return
lno@33   @87   key            key: return
lno@33   @81   variable       varname: d

lno@37   @88   program        children: [ @89 @90 @91 ]
lno@37   @89   type           type: integer
lno@37   @90   key            key: main
lno@40   @91   statement      children: [ @92 @94 @98 @102 @106 @110 @112 @114 @115 @116 @117 @118 @119 @120 @126 @133 @140 @198 ]
               stmt: block
lno@40   @92   statement      children: [ @63 @93 ]
               stmt: assign
lno@40   @63   variable       varname: noval
lno@40   @93   expression     children: [ @49 @54 ]
               opeartor: +
lno@40   @49   variable       varname: dec
lno@40   @54   variable       varname: oct
lno@41   @94   statement      children: [ @63 @95 ]
               stmt: assign
lno@41   @63   variable       varname: noval
lno@41   @95   expression     children: [ @96 @97 ]
               opeartor: -
lno@41   @96   variable       varname: dec
lno@41   @97   variable       varname: hex
lno@42   @98   statement      children: [ @63 @99 ]
               stmt: assign
lno@42   @63   variable       varname: noval
lno@42   @99   expression     children: [ @100 @101 ]
               opeartor: *
lno@42   @100  variable       varname: oct
lno@42   @101  variable       varname: hex
lno@43   @102  statement      children: [ @63 @103 ]
               stmt: assign
lno@43   @63   variable       varname: noval
lno@43   @103  expression     children: [ @104 @105 ]
               opeartor: /
lno@43   @104  variable       varname: oct
lno@43   @105  variable       varname: hex
lno@44   @106  statement      children: [ @63 @107 ]
               stmt: assign
lno@44   @63   variable       varname: noval
lno@44   @107  expression     children: [ @108 @109 ]
               opeartor: %
lno@44   @108  variable       varname: hex
lno@44   @109  variable       varname: dec
lno@45   @110  statement      children: [ @63 @111 ]
               stmt: assign
lno@45   @63   variable       varname: noval
lno@45   @111  expression     children: [ @63 ]
               opeartor: +
lno@45   @63   variable       varname: noval
lno@46   @112  statement      children: [ @63 @113 ]
               stmt: assign
lno@46   @63   variable       varname: noval
lno@46   @113  expression     children: [ @63 ]
               opeartor: -
lno@46   @63   variable       varname: noval
lno@47   @114  statement      children: [ @63 @63 ]
               stmt: assign
lno@47   @63   variable       varname: noval
lno@47   @63   variable       varname: noval
lno@48   @115  statement      children: [ @63 @63 ]
               stmt: assign
lno@48   @63   variable       varname: noval
lno@48   @63   variable       varname: noval
lno@49   @116  statement      children: [ @63 @63 ]
               stmt: assign
lno@49   @63   variable       varname: noval
lno@49   @63   variable       varname: noval
lno@50   @117  statement      children: [ @63 @63 ]
               stmt: assign
lno@50   @63   variable       varname: noval
lno@50   @63   variable       varname: noval
lno@51   @118  statement      children: [ @63 @63 ]
               stmt: assign
lno@51   @63   variable       varname: noval
lno@51   @63   variable       varname: noval
lno@52   @119  statement      children: [ @63 @63 ]
               stmt: assign
lno@52   @63   variable       varname: noval
lno@52   @63   variable       varname: noval
lno@55   @120  statement      children: [ @63 @121 ]
               stmt: assign
lno@55   @63   variable       varname: noval
lno@55   @121  expression     children: [ @122 @123 ]
               opeartor: +
lno@55   @122  variable       varname: dec
lno@55   @123  expression     children: [ @124 @125 ]
               opeartor: *
lno@55   @124  variable       varname: oct
lno@55   @125  variable       varname: hex
lno@56   @126  statement      children: [ @63 @127 ]
               stmt: assign
lno@56   @63   variable       varname: noval
lno@56   @127  expression     children: [ @128 @132 ]
               opeartor: +
lno@56   @128  expression     children: [ @63 @129 ]
               opeartor: +
lno@56   @63   variable       varname: noval
lno@56   @129  expression     children: [ @130 @131 ]
               opeartor: *
lno@56   @130  variable       varname: dec
lno@56   @131  variable       varname: oct
lno@56   @132  variable       varname: hex
lno@57   @133  statement      children: [ @63 @134 ]
               stmt: assign
lno@57   @63   variable       varname: noval
lno@57   @134  expression     children: [ @135 @139 ]
               opeartor: *
lno@57   @135  expression     children: [ @136 @137 ]
               opeartor: -
lno@57   @136  variable       varname: dec
lno@57   @137  expression     children: [ @138 ]
               opeartor: -
lno@57   @138  variable       varname: oct
lno@57   @139  variable       varname: hex
lno@59   @140  statement      children: [ @141 @142 @144 @150 @151 @152 @155 @166 @167 @168 @173 @183 @184 ]
               stmt: condition
lno@59   @141  key            key: if
lno@59   @142  expression     children: [ @63 @143 ]
               opeartor: !=
lno@59   @63   variable       varname: noval
lno@59   @143  const          value: 0
lno@61   @144  statement      children: [ @145 ]
               stmt: block
lno@61   @145  statement      children: [ @146 @147 ]
               stmt: declaration
lno@61   @146  type           type: integer
lno@61   @147  statement      children: [ @148 @149 ]
               stmt: assign
lno@61   @148  variable       varname: noval
lno@61   @149  const          value: 0
lno@63   @150  key            key: else
lno@63   @151  key            key: if
lno@63   @152  expression     children: [ @153 @154 ]
               opeartor: ==
lno@63   @153  variable       varname: noval
lno@63   @154  const          value: 1
lno@65   @155  statement      children: [ @156 ]
               stmt: block
lno@65   @156  statement      children: [ @157 @158 @165 ]
               stmt: condition
lno@65   @157  key            key: if
lno@65   @158  expression     children: [ @159 @162 ]
               opeartor: &&
lno@65   @159  expression     children: [ @160 @161 ]
               opeartor: >=
lno@65   @160  variable       varname: noval
lno@65   @161  const          value: 1
lno@65   @162  expression     children: [ @163 @164 ]
               opeartor: <=
lno@65   @163  variable       varname: noval
lno@65   @164  const          value: 1
lno@66   @165  key            key: return
lno@68   @166  key            key: else
lno@68   @167  key            key: if
lno@68   @168  expression     children: [ @169 @170 ]
               opeartor: ||
lno@68   @169  variable       varname: dec
lno@68   @170  expression     children: [ @171 @172 ]
               opeartor: &&
lno@68   @171  variable       varname: oct
lno@68   @172  variable       varname: hex
lno@68   @173  statement      children: [ @174 @176 @178 @180 @182 ]
               stmt: block
lno@68   @174  statement      children: [ @175 ]
               stmt: i/o
lno@70   @175  const          value: a
lno@70   @176  statement      children: [ @177 ]
               stmt: i/o
lno@71   @177  variable       varname: ch
lno@71   @178  statement      children: [ @179 ]
               stmt: i/o
lno@72   @179  variable       varname: noval
lno@72   @180  statement      children: [ @181 ]
               stmt: i/o
lno@73   @181  const          value: 12
lno@74   @182  statement      children: [ @179 ]
               stmt: i/o
lno@74   @179  variable       varname: noval
lno@76   @183  key            key: else
lno@78   @184  statement      children: [ @185 ]
               stmt: block
lno@78   @185  statement      children: [ @186 @187 @196 ]
               stmt: loop
lno@78   @186  key            key: while
lno@78   @187  expression     children: [ @188 @192 ]
               opeartor: &&
lno@78   @188  expression     children: [ @189 ]
               opeartor: !
lno@78   @189  expression     children: [ @190 @191 ]
               opeartor: <
lno@78   @190  variable       varname: noval
lno@78   @191  const          value: 1
lno@78   @192  expression     children: [ @193 ]
               opeartor: !
lno@78   @193  expression     children: [ @194 @195 ]
               opeartor: >
lno@78   @194  variable       varname: noval
lno@78   @195  const          value: 1
lno@80   @196  statement      children: [ @197 ]
               stmt: block
lno@80   @197  key            key: break
lno@83   @198  statement      children: [ @199 @200 @205 @207 @209 ]
               stmt: loop
lno@83   @199  key            key: for
lno@83   @200  statement      children: [ @201 @202 ]
               stmt: declaration
lno@83   @201  type           type: integer
lno@83   @202  statement      children: [ @203 @204 ]
               stmt: assign
lno@83   @203  variable       varname: i
lno@83   @204  const          value: 0
lno@83   @205  expression     children: [ @203 @206 ]
               opeartor: <
lno@83   @203  variable       varname: i
lno@83   @206  const          value: 10
lno@83   @207  statement      children: [ @203 @208 ]
               stmt: assign
lno@83   @203  variable       varname: i
lno@83   @208  const          value: 1
lno@85   @209  statement      children: [ @210 ]
               stmt: block
lno@85   @210  statement      children: [ @211 @212 @213 ]
               stmt: condition
lno@85   @211  key            key: if
lno@85   @212  expression     children: [ @63 ]
               opeartor: !
lno@85   @63   variable       varname: noval
lno@85   @213  key            key: continue
